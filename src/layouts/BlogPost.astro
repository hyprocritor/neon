---
import type {CollectionEntry} from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import {slide} from "astro:transitions";
import TableOfContents from "../components/TableOfContents.astro";
type Props = CollectionEntry<"blog">["data"];
const {
    title,
    description,
    pubDate,
    updatedDate,
    heroImage,
    headings,
    remarkPluginFrontmatter,
} = Astro.props;
---

<html lang="zh-Hans">
<head>
    <BaseHead title={title} description={description}/>
    <!--<link rel="stylesheet" href="//unpkg.com/heti/umd/heti.min.css">-->
    <link
            rel="stylesheet"
            href="/js/venobox.min.css"
            type="text/css"
            media="screen"
    />
    <script is:inline>
        // bottom of each link
        let linkStarts = new WeakMap();
        let linkEnds = new WeakMap();

        function addIntersectionObserver() {
            const observer = new IntersectionObserver((sections) => {
                sections.forEach((section) => {
                    const heading =
                        section.target.querySelector("h2, h3, h4, h5");
                    if (!heading) return;
                    const id = heading.getAttribute("id");

                    // Get the link to this section's heading
                    const link = document.querySelector(
                        `nav.toc li a[href="#${id}"]`,
                    );
                    if (!link) return;

                    // Add/remove the .active class based on whether the
                    // section is visible
                    const addRemove =
                        section.intersectionRatio > 0 ? "add" : "remove";
                    link.classList[addRemove]("active");
                });
                updatePath();
            });

            // Observe all the sections of the article
            document
                .querySelectorAll("article section")
                .forEach((section) => {
                    observer.observe(section);
                });
        }

        function addResizeObserver() {
            if (!document.querySelector("nav.toc")) return;
            const observer = new ResizeObserver(() => {
                drawPath();
                updatePath();
            });
            observer.observe(document.querySelector("nav.toc"));
        }

        function drawPath() {
            const path = document.querySelector("path.toc-marker");
            const links = Array.from(
                document.querySelectorAll("nav.toc a"),
            );
            if (!links.length) return;

            // Start with an empty array of path data values (joined with
            // spaces later)
            let pathData = [];
            let left = 0; // The last x position / indentation

            // Iterate over each link to build up the pathData
            links.forEach((link, i) => {
                const x = link.offsetLeft;
                const y = link.offsetTop;
                const height = link.offsetHeight;
                if (i === 0) {
                    // The top of the first link starts at 0px along the path.
                    linkStarts.set(link, 0);
                    // Like drawing with a pen...
                    // 'M'ove to the top left of the first link,
                    // and then draw a 'L'ine to the bottom left
                    pathData.push("M", x, y, "L", x, y + height);
                } else {
                    // If the current link is indented differently than the last,
                    // then come down to the current link's top before moving
                    // left or right. This ensures we get 90-degrees angle at the
                    // corners.
                    if (left !== x) pathData.push("L", left, y);

                    // Draw a line to the top left of the current link
                    pathData.push("L", x, y);

                    // Apply the current path data to the path element
                    path.setAttribute("d", pathData.join(" "));

                    // Get the total length of the path now that it extends
                    // to the top of this link, and store it in our linkStarts
                    // WeakMap.
                    linkStarts.set(link, path?.getTotalLength());

                    // Draw a line to the bottom left of the current link
                    pathData.push("L", x, y + height);
                }

                // Save the current link's x position to compare with the next
                // link
                left = x;

                // Apply the current path data to the path element again
                path.setAttribute("d", pathData.join(" "));

                // Get the length of the path that now extends to the
                // bottom of this link, and store it in our linkEnds WeakMap.
                linkEnds.set(link, path?.getTotalLength());
            });
        }

        function updatePath() {
            const path = document.querySelector("path.toc-marker");
            if (path === null) return;
            const pathLength = path.getTotalLength();
            const activeLinks =
                document.querySelectorAll("nav.toc a.active");
            let linkStart = pathLength;
            let linkEnd = 0;
            activeLinks.forEach((link) => {
                // Set linkStart to the top of the earliest active link
                linkStart = Math.min(linkStart, linkStarts.get(link));
                // Set linkEnd to the bottom of the furthest active link
                linkEnd = Math.max(linkEnd, linkEnds.get(link));
            });
            // If there are no active links, hide the path
            path.style.display = activeLinks.length ? "inline" : "none";
            // FINALLY, do the thing!
            path.setAttribute(
                "stroke-dasharray",
                `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`,
            );
        }
    </script>
</head>
<body class="dark:bg-gray-900 transition-bg duration-300">
<Header/>
<main>
    <div class="flex mx-auto md:px-8 px-5 items-start">
        <TableOfContents toc={headings}/>
        <div class="md:pr-[2.2rem] w-full">
            <article
                    class="mt-12 w-full md:w-fit mr-3 lg:mx-auto rounded-xl pb-2 shadow-lg shadow-blue dark:shadow-pink border dark:border-dark w-6xl drop-shadow"
                    data-overlayscrollbars-initialize
            >
                <!--<div id="hero-image-container" class=`max-w-6xl mx-auto p-2 h-md  bg-no-repeat bg-cover rounded-t-lg`-->
                <!--     style=`background-image: url(${heroImage});`>-->
                <!--</div>-->
                <div
                        class="h-md bg-no-repeat bg-cover bg-center"
                        style=`background-image: url(${heroImage});`
                >
                    <div
                            class="pt-16 flex-col space-y-lg h-full text-center flex justify-center items-center"
                    >
                        <h1
                                class="text-4xl mx-auto w-fit text-center text-white font-800 dark:bg-amber  drop-shadow drop-shadow-color-dark">
                            {title}
                        </h1>
                        <div class="flex items-center justify-center gap-2 drop-shadow color-white drop-shadow-color-black">
                            <div class='w-full whitespace-pre flex items-center'>
                                <div class="i-material-symbols:date-range"></div>
                                {new Date(pubDate).toLocaleString("zh-cn", {
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric",
                                }).trim()}
                            </div>
                            <div class="flex w-full items-center justify-center whitespace-pre">
                                <div class="i-mdi:text-shadow">
                                </div>
                                {
                                    remarkPluginFrontmatter.readingTime
                                        .words
                                } 字
                            </div>

                            <div class="flex w-full items-center justify-center whitespace-pre">
                                <div class="i-mdi:clock"></div>
                                {
                                    remarkPluginFrontmatter.readingTime
                                        .minutes
                                } 分钟
                            </div>
                        </div>
                    </div>
                </div>
                <slot/>
            </article>
        </div>
    </div>
</main>
<Footer/>
</body>
</html>
<style lang="scss" is:global>
  .headings-underline {
    position: static;
    height: 0.4rem;
    margin-top: 0.3rem;
    width: 100%;
    border-radius: 9999px;
    content: "";
    max-width: 8rem;
    background-color: #ff3cac;
    background-image: linear-gradient(
                    225deg,
                    #ff3cac 0%,
                    #784ba0 50%,
                    #2b86c5 100%
    );
  }

  .heading-wrapper {
    z-index: 0;
    margin-left: -28px;
  }

  html {
    scroll-padding-top: 120px;
  }
</style>
