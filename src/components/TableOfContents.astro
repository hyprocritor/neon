---
interface Props {
    toc: any
}
import TableOfContentsHeading from './TableOfContentsHeading.astro'
function buildToc(headings) {
    const toc = [];
    const parentHeadings = new Map();
    headings.forEach((h) => {
        const heading = {...h, subheadings: []};
        parentHeadings.set(heading.depth, heading);
        // Change 2 to 1 if your markdown includes your <h1>
        if (heading.depth === 2) {
            toc.push(heading);
        } else {
            parentHeadings.get(heading.depth - 1)?.subheadings.push(heading);
        }
    });
    return toc;

}
const toc = buildToc(Astro.props.toc);
---
<nav class="toc">
    <ul>
        {toc.map((heading) =>
                <TableOfContentsHeading heading={heading}/>)}
    </ul>
    <svg class="toc-progress" xmlns="http://www.w3.org/2000/svg">
        <path
                class="toc-marker"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-dasharray="1 0 0 1000"
                stroke-dashoffset="1"
                stroke-linecap="round"
                stroke-linejoin="round"
        ></path>
    </svg>
</nav>
<style is:global lang="scss">
  .toc {
    display: none;
  }
  @media (min-width: 1024px) {
    nav.toc {
      display: block;
      position: sticky;
      top: 8rem;
      min-width: 300px;
      width: 300px;

      ul {
        list-style-type: none;
        padding-left: 2.2rem;
      }

      svg.toc-progress {
        pointer-events: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }

      path.toc-marker {
        transition: stroke-dasharray 0.3s ease;
      }

      a {
        display: block;
        text-decoration: none;
        color: inherit;
        padding: 0.25rem 0.5rem;
      }

      a:not(.active) {
        color: #899;
      }
    }
  }
</style>
